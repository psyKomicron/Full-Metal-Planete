using Metier.Carte;
using Metier.Carte.Cases;
using System.Collections.Generic;

namespace Metier.Unites
{
    public class Astronef : Unite
    {
        List<Tourelle> tour;

        public Astronef(Case position, Joueur joueur) : base(position, joueur)
        {
            tour = new List<Tourelle>();
        }

        public override TypeEntite Type
        {
            get => TypeEntite.ASTRONEF;
        }

        /*
         * Cette fonction met dans la case en haut, bas gauche, et bas droite de l'astronef ses tourelles
         */
        public void Tourelle()
        {
            Tourelle t1 = new Tourelle(Position.Voisin(TypeDirection.Haut), Joueur);
            Tourelle t2 = new Tourelle(Position.Voisin(TypeDirection.BasDroite), Joueur);
            Tourelle t3 = new Tourelle(Position.Voisin(TypeDirection.BasGauche), Joueur);

            tour.Add(t1);
            tour.Add(t2);
            tour.Add(t3);

            Joueur.Carte.AjouterUnite(t1, Position.Voisin(TypeDirection.Haut));
            Joueur.Carte.AjouterUnite(t2, Position.Voisin(TypeDirection.BasDroite));
            Joueur.Carte.AjouterUnite(t3, Position.Voisin(TypeDirection.BasGauche));
        }

        /*
         * Retourne si l'astronef est posable sur la case demander ou non
         */
        public static bool EstPosable(Case Posi)
        {
            Case caseClique = Posi;

            bool res = false;
            if (!caseClique.EstBord())
            {
                Case haut = Posi.Voisin(TypeDirection.Haut);
                Case basGauche = Posi.Voisin(TypeDirection.BasGauche);
                Case basDroite = Posi.Voisin(TypeDirection.BasDroite);
                if (!haut.EstBord() && !basGauche.EstBord() && !basDroite.EstBord())
                {
                    if (caseClique.Type() ==TypeCases.MONTAGNE || caseClique.Type() == TypeCases.PLAINE)
                    {
                        
                        if ((haut.Type() == TypeCases.MONTAGNE || haut.Type() == TypeCases.PLAINE) && (basGauche.Type().Equals(TypeCases.MONTAGNE) || basGauche.Type().Equals(TypeCases.PLAINE)) && (basDroite.Type().Equals(TypeCases.MONTAGNE) || basDroite.Type().Equals(TypeCases.PLAINE)))
                        {
                            if (haut.Entity != null && basGauche.Entity != null && basDroite.Entity != null && caseClique != null)
                            {
                                res = false;
                            }
                            else
                            {
                                res = true;
                            }

                        }
                    }
                }
            }
            return res;
        }


        public override bool SeDeplacer(Joueur j, Case arrivee)
        {
            return false;
        }
    }
}
